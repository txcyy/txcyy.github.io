3:I[9275,[],""]
6:I[1343,[],""]
7:I[9512,["257","static/chunks/257-d6408e43d3a4c1f7.js","231","static/chunks/231-75c2bb16e5311c25.js","185","static/chunks/app/layout-5aac403eda8ffac1.js"],"ThemeProvider"]
8:I[9890,["257","static/chunks/257-d6408e43d3a4c1f7.js","231","static/chunks/231-75c2bb16e5311c25.js","185","static/chunks/app/layout-5aac403eda8ffac1.js"],"ColorProvider"]
9:I[1998,["257","static/chunks/257-d6408e43d3a4c1f7.js","231","static/chunks/231-75c2bb16e5311c25.js","185","static/chunks/app/layout-5aac403eda8ffac1.js"],"default"]
a:I[3408,["257","static/chunks/257-d6408e43d3a4c1f7.js","231","static/chunks/231-75c2bb16e5311c25.js","185","static/chunks/app/layout-5aac403eda8ffac1.js"],"ColorToggle"]
b:I[6345,["257","static/chunks/257-d6408e43d3a4c1f7.js","231","static/chunks/231-75c2bb16e5311c25.js","185","static/chunks/app/layout-5aac403eda8ffac1.js"],"ThemeToggle"]
c:I[7970,["257","static/chunks/257-d6408e43d3a4c1f7.js","231","static/chunks/231-75c2bb16e5311c25.js","185","static/chunks/app/layout-5aac403eda8ffac1.js"],"NavToggle"]
4:["category","web--vue2","d"]
5:["title","%E6%8C%87%E4%BB%A4%26%E6%8F%92%E6%A7%BD","d"]
0:["GB6GWdwB48S_6jQAbWqVr",[[["",{"children":["post",{"children":[["category","web--vue2","d"],{"children":[["title","%E6%8C%87%E4%BB%A4%26%E6%8F%92%E6%A7%BD","d"],{"children":["__PAGE__?{\"category\":\"web--vue2\",\"title\":\"指令&插槽\"}",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["post",{"children":[["category","web--vue2","d"],{"children":[["title","%E6%8C%87%E4%BB%A4%26%E6%8F%92%E6%A7%BD","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","post","children","$4","children","$5","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/2715c8fee6b9b9b3.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","post","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","post","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":["$","body",null,{"className":"min-h-screen bg-background font-sans antialiased __variable_aaf875","children":["$","$L7",null,{"attribute":"class","defaultTheme":"system","enableSystem":true,"disableTransitionOnChange":true,"children":["$","$L8",null,{"children":[["$","header",null,{"className":"sticky top-0 z-50 w-full border-b border-primary/40 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60","children":["$","div",null,{"className":"container flex h-14 max-w-screen-2xl items-center justify-between","children":[["$","div",null,{"className":"mr-4 flex","children":[["$","a",null,{"className":"mr-6 flex items-center space-x-2","href":"/","children":[["$","span",null,{"className":"inline-block w-8 h-8","children":["$","svg",null,{"viewBox":"0 0 64 64","children":["$","g",null,{"fill":"none","fillRule":"evenodd","children":[["$","circle",null,{"cx":32,"cy":32,"r":26,"fill":"hsl(var(--primary))"}],["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","xmlnsXlink":"http://www.w3.org/1999/xlink","width":26,"height":26,"x":19,"y":10,"viewBox":"0 0 24 24","children":["$","path",null,{"fill":"hsl(var(--background))","d":"M5.438 2c-.512 0-1.02.203-1.407.594L2.594 4.03a1.987 1.987 0 0 0 0 2.813l2.125 2.125C3.977 10.46 3.207 12.016 3 12.375c-.469.813-1 1.617-1 2.625 0 1.473.805 2.746 2 3.438.184.105 4.188 2.906 4.188 2.906h.03C8.896 21.75 9.66 22 10.5 22h3c.832 0 1.613-.223 2.281-.625.38-.227 4.031-2.664 5.219-3.75.688-.633 1-1.621 1-2.625s-.414-1.754-1-2.625c-.277-.43-1.023-1.96-1.719-3.406l2.125-2.125a1.987 1.987 0 0 0 0-2.813L19.97 2.594a1.987 1.987 0 0 0-2.813 0l-1.5 1.5A2.2 2.2 0 0 0 15 4H9a2.8 2.8 0 0 0-.656.094l-1.5-1.5A1.98 1.98 0 0 0 5.437 2M9.5 10a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3m5 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3M12 13.813c.395 0 .79.054 1 .187.95.59 3 2.883 3 4 0 .559-1.328 1.781-2 2-.953.309-3.047.309-4 0-.672-.219-2-1.441-2-2 0-1.117 2.05-3.41 3-4 .21-.133.605-.187 1-.187M11 17c-.363 0-.57.43-.312.688l1.03 1.218c.16.16.403.16.563 0l1.031-1.218C13.57 17.43 13.364 17 13 17Z"}]}],["$","text",null,{"fill":"hsl(var(--background))","data-text-alignment":"C","fontFamily":"Fira Mono","fontSize":14,"fontWeight":700,"letterSpacing":0.81,"transform":"translate(-4 33)","children":["$","tspan",null,{"x":17.07,"y":17,"children":"XCYY"}]}],["$","circle",null,{"cx":32,"cy":32,"r":30,"stroke":"hsl(var(--primary))","strokeWidth":2}]]}]}]}],["$","span",null,{"className":"text-primary","children":"新宸悦雨"}]]}],["$","$L9",null,{}]]}],["$","nav",null,{"className":"flex items-center space-x-2","children":[["$","$La",null,{}],["$","$Lb",null,{}],["$","div",null,{"className":"md:hidden","children":["$","$Lc",null,{}]}]]}]]}]}],["$","main",null,{"className":"container max-w-screen-2xl py-6","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}]]}]}]}]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f8ad259a7d5c0bf2.css","precedence":"next","crossOrigin":"$undefined"}]],"$Ld"]]]]
e:I[789,["257","static/chunks/257-d6408e43d3a4c1f7.js","472","static/chunks/app/post/%5Bcategory%5D/%5Btitle%5D/page-bb1b5c27d30bc491.js"],"default"]
f:T56e,
<ul>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%E7%9A%84%E5%AE%9E%E7%8E%B0">自定义指令的实现</a>
<ul>
<li><a href="#%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C--%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C">全局注册 &#x26; 局部注册</a></li>
<li><a href="#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0">钩子函数</a></li>
<li><a href="#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0">钩子函数的参数</a></li>
</ul>
</li>
<li><a href="#%E6%8C%87%E4%BB%A4%E5%88%97%E8%A1%A8">指令列表</a>
<ul>
<li><a href="#v-text%E5%9F%BA%E6%9C%AC%E4%B8%8D%E4%BD%BF%E7%94%A8">v-text【基本不使用】</a></li>
<li><a href="#v-html">v-html</a></li>
<li><a href="#v-show">v-show</a></li>
<li><a href="#v-if--v-else--v-else-if">v-if &#x26; v-else &#x26; v-else-if</a></li>
<li><a href="#v-for">v-for</a></li>
<li><a href="#v-on%E7%AE%80%E5%86%99">v-on【简写@】</a></li>
<li><a href="#v-bind%E7%AE%80%E5%86%99">v-bind【简写:】</a></li>
<li><a href="#v-model%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A">v-model【双向数据绑定】</a></li>
<li><a href="#v-slot%E7%AE%80%E5%86%99">v-slot【简写#】</a></li>
<li><a href="#v-pre%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">v-pre【性能优化】</a></li>
<li><a href="#v-cloak">v-cloak</a></li>
<li><a href="#v-once%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">v-once【性能优化】</a></li>
</ul>
</li>
</ul>10:T7c38,
<h1 id="自定义指令的实现">自定义指令的实现</h1>
<h2 id="全局注册--局部注册">全局注册 &#x26; 局部注册</h2>
<blockquote>
<p>除了核心功能默认内置的指令 (v-model 和 v-show)，Vue 也允许注册自定义指令。</p>
<p>注意，在 Vue2.0 中，代码复用和抽象的主要形式是组件。然而，有的情况下，你仍然需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令。</p>
</blockquote>
<pre><code class="hljs language-javascript"><span class="hljs-comment">// 注册一个全局自定义指令 `v-focus`</span>
<span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">'focus'</span>, {
  <span class="hljs-comment">// 当被绑定的元素插入到 DOM 中时……</span>
  <span class="hljs-attr">inserted</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) {
    <span class="hljs-comment">// 聚焦元素</span>
    el.<span class="hljs-title function_">focus</span>()
  }
})

<span class="hljs-comment">// 在组件内使用directives选项进行局部注册</span>
<span class="hljs-attr">directives</span>: {
  <span class="hljs-attr">focus</span>: {
    <span class="hljs-comment">// 指令的定义</span>
    <span class="hljs-attr">inserted</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) {
      el.<span class="hljs-title function_">focus</span>()
    }
  }
}

<span class="hljs-comment">// 使用</span>
&#x3C;input v-focus>
</code></pre>
<h2 id="钩子函数">钩子函数</h2>
<blockquote>
<p>一个指令定义对象可以提供如下几个钩子函数 (均为可选)：</p>
<p>bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</p>
<p>inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</p>
<p>update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 。</p>
<p>componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用。</p>
<p>unbind：只调用一次，指令与元素解绑时调用。</p>
</blockquote>
<h2 id="钩子函数的参数">钩子函数的参数</h2>
<blockquote>
<p>指令钩子函数会被传入以下参数：</p>
<p>el：指令所绑定的元素，可以用来直接操作 DOM 。</p>
<p>binding：一个对象，包含以下属性：</p>
<ul>
<li>name：指令名，不包括 v前缀。</li>
<li>value：指令的绑定值，例如：v-my-directive="1 + 1" 中，绑定值为 2。</li>
<li>oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</li>
<li>expression：字符串形式的指令表达式。例如 v-my-directive="1 + 1" 中，表达式为 "1 + 1"。</li>
<li>arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 "foo"。</li>
<li>modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。</li>
</ul>
<p>vnode：Vue 编译生成的虚拟节点。移步 VNode API 来了解更多详情。</p>
<p>oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</p>
</blockquote>
<h1 id="指令列表">指令列表</h1>
<h2 id="v-text基本不使用">v-text【基本不使用】</h2>
<p><strong>描述：</strong></p>
<blockquote>
<p>更新元素的 textContent。如果要更新部分的 textContent ，需要使用 {{ Mustache }} 插值。</p>
</blockquote>
<p><strong>例子：</strong></p>
<pre><code class="hljs language-php-template"><span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">span</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">"msg"</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span>
<span class="hljs-comment">&#x3C;!-- 和下面的一样 --></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">span</span>></span>{{msg}}<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span>
</span></code></pre>
<h2 id="v-html">v-html</h2>
<p><strong>描述：</strong></p>
<blockquote>
<p>更新元素的 innerHTML 。</p>
<p>注意：内容按普通 HTML 插入 - 不会作为 Vue 模板进行编译 。如果试图使用 v-html 组合模板，可以重新考虑是否通过使用组件来替代。
注意：在网站上动态渲染任意 HTML 是非常危险的，因为容易导致 XSS 攻击。只在可信内容上使用 v-html，永不用在用户提交的内容上。</p>
<p>注意：在单文件组件里，scoped 的样式不会应用在 v-html 内部，因为那部分 HTML 没有被 Vue 的模板编译器处理。如果你希望针对 v-html 的内容设置带作用域的 CSS，你可以替换为 CSS Modules 或用一个额外的全局<code>&#x3C;style></code>元素手动设置类似 BEM 的作用域策略。</p>
</blockquote>
<p><strong>例子：</strong></p>
<pre><code class="hljs language-css">// htmlStr将会被渲染，即下面这个<span class="hljs-selector-tag">div</span>会被替换成htmlStr的值
&#x3C;<span class="hljs-selector-tag">div</span> v-<span class="hljs-selector-tag">html</span>="htmlStr">&#x3C;/<span class="hljs-selector-tag">div</span>>
</code></pre>
<h2 id="v-show">v-show</h2>
<p><strong>描述：</strong></p>
<blockquote>
<p>根据表达式之真假值，切换元素的 display CSS 属性。</p>
<p>当条件变化时该指令触发过渡效果。</p>
</blockquote>
<p><strong>例子：</strong></p>
<pre><code class="hljs language-ini">&#x3C;div <span class="hljs-attr">v-show</span>=<span class="hljs-string">"isShow"</span>>显示/隐藏&#x3C;/div>
</code></pre>
<h2 id="v-if--v-else--v-else-if">v-if &#x26; v-else &#x26; v-else-if</h2>
<p><strong>描述：</strong></p>
<blockquote>
<p>v-if：根据表达式的值的真假条件渲染元素。在切换时元素及它的数据绑定 / 组件被销毁并重建。如果元素是<code>&#x3C;template></code>，将提出它的内容作为条件块。当条件变化时该指令触发过渡效果。</p>
<p>使用v-else或者v-else-if时，前一兄弟元素必须有 v-if 或 v-else-if。</p>
<p>注意： 当和 v-if 一起使用时，v-for 的优先级比 v-if 更高</p>
</blockquote>
<p><strong>例子：</strong></p>
<pre><code class="hljs language-less"><span class="hljs-comment">// v-if 将分别重复运行于每个 v-for 循环中，只有isComplete为false的li会被渲染。</span>
<span class="hljs-comment">// 当你想为仅有的一些项渲染节点时，这种优先级的机制会十分有用。</span>
&#x3C;<span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">v-for</span>="<span class="hljs-selector-tag">todo</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">todos</span>" <span class="hljs-selector-tag">v-if</span>="!<span class="hljs-selector-tag">todo</span><span class="hljs-selector-class">.isComplete</span>">
  {{ <span class="hljs-selector-tag">todo</span> }}
&#x3C;/<span class="hljs-selector-tag">li</span>>

<span class="hljs-comment">// 条件判断</span>
&#x3C;<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">v-if</span>="<span class="hljs-selector-tag">type</span> === '<span class="hljs-selector-tag">A</span>'">
  <span class="hljs-selector-tag">A</span>
&#x3C;/<span class="hljs-selector-tag">div</span>>
&#x3C;<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">v-else-if</span>="<span class="hljs-selector-tag">type</span> === '<span class="hljs-selector-tag">B</span>'">
  <span class="hljs-selector-tag">B</span>
&#x3C;/<span class="hljs-selector-tag">div</span>>
&#x3C;<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">v-else</span>>
  <span class="hljs-selector-tag">Not</span> <span class="hljs-selector-tag">A</span>/<span class="hljs-selector-tag">B</span>
&#x3C;/<span class="hljs-selector-tag">div</span>>
</code></pre>
<h2 id="v-for">v-for</h2>
<p><strong>描述：</strong></p>
<blockquote>
<p>值：Array | Object | number | string | Iterable (2.6 新增)</p>
</blockquote>
<p><strong>例子：</strong></p>
<pre><code class="hljs language-ini">&#x3C;div <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item, index) in items"</span>>&#x3C;/div>
&#x3C;div <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(val, key) in object"</span>>&#x3C;/div>
&#x3C;div <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(val, key, index) in object"</span>>&#x3C;/div>
</code></pre>
<h2 id="v-on简写">v-on【简写@】</h2>
<p><strong>描述：</strong></p>
<blockquote>
<p>绑定事件监听器。事件类型由参数指定。表达式可以是一个方法的名字或一个内联语句，如果没有修饰符也可以省略。</p>
</blockquote>
<blockquote>
<p>用在普通元素上时，只能监听原生 DOM 事件。用在自定义元素组件上时，也可以监听子组件触发的自定义事件。</p>
</blockquote>
<blockquote>
<p>在监听原生 DOM 事件时，方法以事件为唯一的参数。如果使用内联语句，语句可以访问一个 $event 属性：v-on:click="handle('ok', $event)"。</p>
</blockquote>
<blockquote>
<p>从 2.4.0 开始，v-on 同样支持不带参数绑定一个事件/监听器键值对的对象。注意当使用对象语法时，是不支持任何修饰器的。</p>
</blockquote>
<p><strong>修饰符：</strong></p>
<ul>
<li>stop 调用 event.stopPropagation()。</li>
<li>prevent 调用 event.preventDefault()。</li>
<li>capture 添加事件侦听器时使用 capture 模式。</li>
<li>self 只当事件是从侦听器绑定的元素本身触发时才触发回调。</li>
<li>{keyCode | keyAlias} 只当事件是从特定键触发时才触发回调。</li>
<li>native 监听组件根元素的原生事件。</li>
<li>once 只触发一次回调。</li>
<li>left (2.2.0) 只当点击鼠标左键时触发。</li>
<li>right (2.2.0) 只当点击鼠标右键时触发。</li>
<li>middle (2.2.0) 只当点击鼠标中键时触发。</li>
<li>passive (2.3.0) 以 { passive: true } 模式添加侦听器</li>
</ul>
<p><strong>例子：</strong></p>
<pre><code class="hljs language-php-template"><span class="xml"><span class="hljs-comment">&#x3C;!-- 缩写 --></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"doThis"</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">button</span>></span>

<span class="hljs-comment">&#x3C;!-- 动态事件缩写 (2.6.0+) --></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">button</span> @[<span class="hljs-attr">event</span>]=<span class="hljs-string">"doThis"</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">button</span>></span>

<span class="hljs-comment">&#x3C;!-- 停止冒泡 --></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">button</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">"doThis"</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">button</span>></span>

<span class="hljs-comment">&#x3C;!-- 阻止默认行为 --></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">button</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">"doThis"</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">button</span>></span>

<span class="hljs-comment">&#x3C;!-- 对象语法 (2.4.0+) --></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">button</span> <span class="hljs-attr">v-on</span>=<span class="hljs-string">"{ mousedown: doThis, mouseup: doThat }"</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">button</span>></span>
</span></code></pre>
<h2 id="v-bind简写">v-bind【简写:】</h2>
<p><strong>描述：</strong></p>
<blockquote>
<p>动态地绑定一个或多个特性，或一个组件 prop 到表达式。</p>
</blockquote>
<blockquote>
<p>在绑定 class 或 style 特性时，支持其它类型的值，如数组或对象。可以通过下面的教程链接查看详情。</p>
</blockquote>
<blockquote>
<p>在绑定 prop 时，prop 必须在子组件中声明。可以用修饰符指定不同的绑定类型。</p>
</blockquote>
<blockquote>
<p>没有参数时，可以绑定到一个包含键值对的对象。注意此时 class 和 style 绑定不支持数组和对象。</p>
</blockquote>
<p><strong>修饰符：</strong></p>
<ul>
<li>prop 被用于绑定 DOM 属性 (property)。(差别在哪里？)</li>
<li>camel (2.1.0+) 将 kebab-case 特性名转换为 camelCase. (从 2.1.0 开始支持)</li>
<li>sync (2.3.0+) 语法糖，会扩展成一个更新父组件绑定值的 v-on 侦听器。</li>
</ul>
<p><strong>例子：</strong></p>
<pre><code class="hljs language-php-template"><span class="xml"><span class="hljs-comment">&#x3C;!-- 缩写 --></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"imageSrc"</span>></span>

<span class="hljs-comment">&#x3C;!-- 动态特性名缩写 (2.6.0+) --></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">button</span> <span class="hljs-attr">:</span>[<span class="hljs-attr">key</span>]=<span class="hljs-string">"value"</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">button</span>></span>

<span class="hljs-comment">&#x3C;!-- 绑定一个有属性的对象 --></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"{ id: someProp, 'other-attr': otherProp }"</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span>

<span class="hljs-comment">&#x3C;!-- 通过 prop 修饰符绑定 DOM 属性 --></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:text-content.prop</span>=<span class="hljs-string">"text"</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span>

<span class="hljs-comment">&#x3C;!-- prop 绑定。“prop”必须在 my-component 中声明。--></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">my-component</span> <span class="hljs-attr">:prop</span>=<span class="hljs-string">"someThing"</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">my-component</span>></span>

<span class="hljs-comment">&#x3C;!-- 通过 $props 将父组件的 props 一起传给子组件 --></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">child-component</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">"$props"</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">child-component</span>></span>
</span></code></pre>
<p><strong>关于.sync修饰符说明</strong></p>
<blockquote>
<p>因双向数据绑定存在维护上的问题，推荐使用update:myPropName 的模式触发事件取而代之。这种模式的缩写就是.sync修饰符。</p>
<p>注意：带有 .sync 修饰符的 v-bind 不能和表达式一起使用 (例如 v-bind:title.sync=”doc.title + ‘!’” 是无效的)。</p>
<p>注意：将 v-bind.sync 用在一个字面量的对象上，例如 v-bind.sync=”{ title: doc.title }”，是无法正常工作的，因为在解析一个像这样的复杂表达式的时候，有很多边缘情况需要考虑。</p>
</blockquote>
<pre><code class="hljs language-arduino"><span class="hljs-comment">// 在组件内部触发update:myPropName事件</span>
<span class="hljs-keyword">this</span>.$<span class="hljs-built_in">emit</span>(<span class="hljs-string">'update:title'</span>, newTitle)

<span class="hljs-comment">// 使用该组件</span>
&#x3C;text-document
  v-bind:title=<span class="hljs-string">"doc.title"</span>
  v-on:update:title=<span class="hljs-string">"doc.title = $event"</span>
>&#x3C;/text-document>

<span class="hljs-comment">// 以.sync修饰符的方式使用该组件</span>
&#x3C;text-document v-bind:title.sync=<span class="hljs-string">"doc.title"</span>>&#x3C;/text-document>

<span class="hljs-comment">// 使用一个对象，设置多个属性</span>
&#x3C;text-document v-bind.sync=<span class="hljs-string">"doc"</span>>&#x3C;/text-document>
</code></pre>
<h2 id="v-model双向数据绑定">v-model【双向数据绑定】</h2>
<p><strong>描述：</strong></p>
<blockquote>
<p>在表单控件或者组件上创建双向绑定。只能在<code>&#x3C;input></code>、<code>&#x3C;select></code>、<code>&#x3C;textarea></code>及自定义组件上使用。</p>
<p>v-model 在内部使用不同的属性为不同的输入元素并抛出不同的事件：</p>
<ul>
<li>text 和 textarea 元素使用 value 属性和 input 事件；</li>
<li>checkbox 和 radio 使用 checked 属性和 change 事件；</li>
<li>select 字段将 value 作为 prop 并将 change 作为事件。</li>
</ul>
</blockquote>
<p><strong>修饰符：</strong></p>
<ul>
<li>lazy 取代 input 监听 change 事件</li>
<li>number 输入字符串转为有效的数字</li>
<li>trim 输入首尾空格过滤</li>
</ul>
<p><strong>例子：</strong></p>
<pre><code class="hljs language-php-template"><span class="xml">// 多行输入框
<span class="hljs-tag">&#x3C;<span class="hljs-name">span</span>></span>Multiline message is:<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"white-space: pre-line;"</span>></span>{{ message }}<span class="hljs-tag">&#x3C;/<span class="hljs-name">p</span>></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"message"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"add multiple lines"</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">textarea</span>></span>

// 单行输入框
<span class="hljs-tag">&#x3C;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"message"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"edit me"</span>></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">p</span>></span>Message is: {{ message }}<span class="hljs-tag">&#x3C;/<span class="hljs-name">p</span>></span>

// 单个复选框，值为boolean
<span class="hljs-tag">&#x3C;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"checked"</span>></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"checkbox"</span>></span>{{ checked }}<span class="hljs-tag">&#x3C;/<span class="hljs-name">label</span>></span>

// 多个复选框，值为数组
<span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">'example-3'</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"jack"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Jack"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"checkedNames"</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"jack"</span>></span>Jack<span class="hljs-tag">&#x3C;/<span class="hljs-name">label</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"john"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"John"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"checkedNames"</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"john"</span>></span>John<span class="hljs-tag">&#x3C;/<span class="hljs-name">label</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"mike"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Mike"</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"checkedNames"</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"mike"</span>></span>Mike<span class="hljs-tag">&#x3C;/<span class="hljs-name">label</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">br</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">span</span>></span>Checked names: {{ checkedNames }}<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span>
<span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span>
</span></code></pre>
<p><strong>关于在组件上使用v-model的说明</strong></p>
<pre><code class="hljs language-php"><span class="hljs-comment">// 一个组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件，</span>
<span class="hljs-comment">// 但是像单选框、复选框等类型的输入控件可能会将 value 特性用于不同的目的。model 选项可以用来避免这样的冲突</span>
Vue.<span class="hljs-title function_ invoke__">component</span>(<span class="hljs-string">'base-checkbox'</span>, {
  <span class="hljs-attr">model</span>: {
    <span class="hljs-attr">prop</span>: <span class="hljs-string">'checked'</span>,
    <span class="hljs-attr">event</span>: <span class="hljs-string">'change'</span>
  },
  <span class="hljs-attr">props</span>: {
    <span class="hljs-attr">checked</span>: Boolean
  },
  <span class="hljs-attr">template</span>: `
    &#x3C;input
      type=<span class="hljs-string">"checkbox"</span>
      v-<span class="hljs-attr">bind</span>:checked=<span class="hljs-string">"checked"</span>
      v-<span class="hljs-attr">on</span>:change=<span class="hljs-string">"<span class="hljs-subst">$emit</span>('change', <span class="hljs-subst">$event</span>.target.checked)"</span>
    >
  `
})
&#x3C;base-checkbox v-model=<span class="hljs-string">"lovingVue"</span>>&#x3C;/base-checkbox>
</code></pre>
<h2 id="v-slot简写">v-slot【简写#】</h2>
<p><strong>描述：</strong></p>
<blockquote>
<p>只能用于<code>&#x3C;template></code>或组件 (对于一个单独的带 prop 的默认插槽)</p>
<p>注意：父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。</p>
</blockquote>
<p><strong>例子：</strong></p>
<pre><code class="hljs language-php-template"><span class="xml">// 插槽后备内容，也就是默认的显示内容
<span class="hljs-tag">&#x3C;<span class="hljs-name">submit-button</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">submit-button</span>></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">slot</span>></span>这是默认的内容<span class="hljs-tag">&#x3C;/<span class="hljs-name">slot</span>></span>
<span class="hljs-tag">&#x3C;/<span class="hljs-name">button</span>></span>

// 父级模板无法访问内部子模板的数据
<span class="hljs-tag">&#x3C;<span class="hljs-name">navigation-link</span> <span class="hljs-attr">url</span>=<span class="hljs-string">"/profile"</span>></span>
  Clicking here will send you to: {{ url }}
  <span class="hljs-comment">&#x3C;!--
  这里的 `url` 会是 undefined，因为 "/profile" 是
  _传递给_ &#x3C;navigation-link> 的而不是
  在 &#x3C;navigation-link> 组件*内部*定义的。
  --></span>
<span class="hljs-tag">&#x3C;/<span class="hljs-name">navigation-link</span>></span>

// 作用域插槽，通过在内部子模板绑定数据的方式，让父模板可以访问内部子模板的数据
<span class="hljs-tag">&#x3C;<span class="hljs-name">current-user</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:default</span>=<span class="hljs-string">"slotProps"</span>></span>
    {{ slotProps.user.firstName }}
  <span class="hljs-tag">&#x3C;/<span class="hljs-name">template</span>></span>
<span class="hljs-tag">&#x3C;/<span class="hljs-name">current-user</span>></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">span</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">slot</span> <span class="hljs-attr">v-bind:user</span>=<span class="hljs-string">"user"</span>></span>
    {{ user.lastName }}
  <span class="hljs-tag">&#x3C;/<span class="hljs-name">slot</span>></span>
<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span>

<span class="hljs-comment">&#x3C;!-- 具名插槽 --></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">base-layout</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:header</span>></span>
    Header content
  <span class="hljs-tag">&#x3C;/<span class="hljs-name">template</span>></span>

  Default slot content

  <span class="hljs-tag">&#x3C;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:footer</span>></span>
    Footer content
  <span class="hljs-tag">&#x3C;/<span class="hljs-name">template</span>></span>
<span class="hljs-tag">&#x3C;/<span class="hljs-name">base-layout</span>></span>

<span class="hljs-comment">&#x3C;!-- 接收 prop 的具名插槽 --></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">infinite-scroll</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:item</span>=<span class="hljs-string">"slotProps"</span>></span>
    <span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"item"</span>></span>
      {{ slotProps.item.text }}
    <span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span>
  <span class="hljs-tag">&#x3C;/<span class="hljs-name">template</span>></span>
<span class="hljs-tag">&#x3C;/<span class="hljs-name">infinite-scroll</span>></span>

<span class="hljs-comment">&#x3C;!-- 接收 prop 的默认插槽，使用了解构 --></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">mouse-position</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">"{ x, y }"</span>></span>
  Mouse position: {{ x }}, {{ y }}
<span class="hljs-tag">&#x3C;/<span class="hljs-name">mouse-position</span>></span>
</span></code></pre>
<h2 id="v-pre性能优化">v-pre【性能优化】</h2>
<p><strong>描述：</strong></p>
<blockquote>
<p>跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译。</p>
</blockquote>
<p><strong>例子：</strong></p>
<pre><code class="hljs language-css">&#x3C;<span class="hljs-selector-tag">div</span> v-pre>
	&#x3C;<span class="hljs-selector-tag">div</span>>
		&#x3C;<span class="hljs-selector-tag">span</span>>例子&#x3C;/<span class="hljs-selector-tag">span</span>>
		&#x3C;<span class="hljs-selector-tag">span</span>>例子&#x3C;/<span class="hljs-selector-tag">span</span>>
		&#x3C;<span class="hljs-selector-tag">span</span>>例子&#x3C;/<span class="hljs-selector-tag">span</span>>
		&#x3C;<span class="hljs-selector-tag">span</span>>例子&#x3C;/<span class="hljs-selector-tag">span</span>>
	&#x3C;/<span class="hljs-selector-tag">div</span>>
	&#x3C;<span class="hljs-selector-tag">div</span>>例子&#x3C;/<span class="hljs-selector-tag">div</span>>
	&#x3C;<span class="hljs-selector-tag">div</span>>例子&#x3C;/<span class="hljs-selector-tag">div</span>>
	&#x3C;<span class="hljs-selector-tag">div</span>>例子&#x3C;/<span class="hljs-selector-tag">div</span>>
&#x3C;/<span class="hljs-selector-tag">div</span>>
</code></pre>
<h2 id="v-cloak">v-cloak</h2>
<p><strong>描述：</strong></p>
<blockquote>
<p>这个指令保持在元素上直到关联实例结束编译。</p>
<p>作用在于实例创建完成之前标识该元素，例如跟[v-cloak] { display: none } 一起用，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕。</p>
</blockquote>
<p><strong>例子：</strong></p>
<pre><code class="hljs language-css">// 实例编译完成之前，该元素隐藏
<span class="hljs-selector-attr">[v-cloak]</span> {
  <span class="hljs-attribute">display</span>: none;
}
&#x3C;<span class="hljs-selector-tag">div</span> v-cloak>
  {{ message }}
&#x3C;/<span class="hljs-selector-tag">div</span>>
</code></pre>
<h2 id="v-once性能优化">v-once【性能优化】</h2>
<p><strong>描述：</strong></p>
<blockquote>
<p>只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。</p>
</blockquote>
<p><strong>例子</strong></p>
<pre><code class="hljs language-php-template"><span class="xml"><span class="hljs-comment">&#x3C;!-- 单个元素 --></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">span</span> <span class="hljs-attr">v-once</span>></span>This will never change: {{msg}}<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span>
<span class="hljs-comment">&#x3C;!-- 有子元素 --></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">v-once</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">h1</span>></span>comment<span class="hljs-tag">&#x3C;/<span class="hljs-name">h1</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">p</span>></span>{{msg}}<span class="hljs-tag">&#x3C;/<span class="hljs-name">p</span>></span>
<span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span>
<span class="hljs-comment">&#x3C;!-- 组件 --></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">my-component</span> <span class="hljs-attr">v-once</span> <span class="hljs-attr">:comment</span>=<span class="hljs-string">"msg"</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">my-component</span>></span>
<span class="hljs-comment">&#x3C;!-- `v-for` 指令--></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">ul</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"i in list"</span> <span class="hljs-attr">v-once</span>></span>{{i}}<span class="hljs-tag">&#x3C;/<span class="hljs-name">li</span>></span>
<span class="hljs-tag">&#x3C;/<span class="hljs-name">ul</span>></span>
</span></code></pre>2:["$","div",null,{"children":[["$","h1",null,{"className":"text-3xl font-semibold","children":"指令&插槽"}],["$","div",null,{"className":"fixed right-12 bottom-20 ","children":["$","$Le",null,{"toc":"$f"}]}],["$","div",null,{"className":"page_content__nM6Lc","dangerouslySetInnerHTML":{"__html":"$10"}}]]}]
d:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"文章 | 指令&插槽"}],["$","meta","3",{"name":"description","content":"新宸悦雨 博客 网站 个人网站"}],["$","meta","4",{"name":"google-site-verification","content":"LiZ4kQwHGTLadwCnDnrXngpwNqoQjmFOCOVTtr_PWVo"}],["$","link","5",{"rel":"icon","href":"/icon.svg?d2cf70afa15ddfd8","type":"image/svg+xml","sizes":"any"}]]
1:null
